kube-prometheus-stack:
  additionalPrometheusRulesMap: {}
  alertmanager:
    alertmanagerSpec:
      additionalPeers: []
      affinity: {}
      alertmanagerConfigNamespaceSelector: {}
      alertmanagerConfigSelector: {}
      alertmanagerConfiguration: {}
      clusterAdvertiseAddress: false
      configMaps: []
      containers: []
      forceEnableClusterMode: false
      image:
        repository: quay.io/prometheus/alertmanager
        sha: ""
        tag: v0.24.0
      initContainers: []
      listenLocal: false
      logFormat: logfmt
      logLevel: info
      nodeSelector: {}
      paused: false
      podAntiAffinity: ""
      podAntiAffinityTopologyKey: kubernetes.io/hostname
      podMetadata: {}
      portName: http-web
      priorityClassName: ""
      replicas: 1
      resources: {}
      retention: 120h
      routePrefix: /
      secrets: []
      securityContext:
        fsGroup: 2000
        runAsGroup: 2000
        runAsNonRoot: true
        runAsUser: 1000
      storage: {}
      tolerations: []
      topologySpreadConstraints: []
      useExistingSecret: false
      volumeMounts: []
      volumes: []
    annotations: {}
    apiVersion: v2
    config:
      global:
        resolve_timeout: 5m
      receivers:
      - name: "null"
      route:
        group_by:
        - job
        group_interval: 5m
        group_wait: 30s
        receiver: "null"
        repeat_interval: 12h
        routes:
        - match:
            alertname: Watchdog
          receiver: "null"
      templates:
      - /etc/alertmanager/config/*.tmpl
    enabled: true
    extraSecret:
      annotations: {}
      data: {}
    ingress:
      annotations: {}
      enabled: false
      hosts: []
      labels: {}
      paths: []
      tls: []
    ingressPerReplica:
      annotations: {}
      enabled: false
      hostDomain: ""
      hostPrefix: ""
      labels: {}
      paths: []
      tlsSecretName: ""
      tlsSecretPerReplica:
        enabled: false
        prefix: alertmanager
    podDisruptionBudget:
      enabled: false
      maxUnavailable: ""
      minAvailable: 1
    secret:
      annotations: {}
    service:
      additionalPorts: []
      annotations: {}
      clusterIP: ""
      externalIPs: []
      externalTrafficPolicy: Cluster
      labels: {}
      loadBalancerIP: ""
      loadBalancerSourceRanges: []
      nodePort: 30903
      port: 9093
      targetPort: 9093
      type: ClusterIP
    serviceAccount:
      annotations: {}
      create: true
      name: ""
    serviceMonitor:
      interval: ""
      metricRelabelings: []
      proxyUrl: ""
      relabelings: []
      scheme: ""
      selfMonitor: true
      tlsConfig: {}
    servicePerReplica:
      annotations: {}
      enabled: false
      externalTrafficPolicy: Cluster
      loadBalancerSourceRanges: []
      nodePort: 30904
      port: 9093
      targetPort: 9093
      type: ClusterIP
    templateFiles: {}
    tplConfig: false
  commonLabels: {}
  coreDns:
    enabled: true
    service:
      port: 9153
      targetPort: 9153
    serviceMonitor:
      interval: ""
      metricRelabelings: []
      proxyUrl: ""
      relabelings: []
  defaultRules:
    additionalRuleLabels: {}
    annotations: {}
    appNamespacesTarget: .*
    create: true
    disabled: {}
    labels: {}
    rules:
      alertmanager: true
      configReloaders: true
      etcd: true
      general: true
      k8s: true
      kubeApiserver: true
      kubeApiserverAvailability: true
      kubeApiserverSlos: true
      kubePrometheusGeneral: true
      kubePrometheusNodeRecording: true
      kubeProxy: true
      kubeScheduler: true
      kubeStateMetrics: true
      kubelet: true
      kubernetesApps: true
      kubernetesResources: true
      kubernetesStorage: true
      kubernetesSystem: true
      network: true
      node: true
      nodeExporterAlerting: true
      nodeExporterRecording: true
      prometheus: true
      prometheusOperator: true
    runbookUrl: https://runbooks.prometheus-operator.dev/runbooks
  fullnameOverride: ""
  global:
    imagePullSecrets: []
    rbac:
      create: true
      createAggregateClusterRoles: false
      pspAnnotations: {}
      pspEnabled: false
  grafana:
    additionalDataSources: []
    admin:
      existingSecret: ""
      passwordKey: admin-password
      userKey: admin-user
    adminPassword: prom-operator
    adminUser: admin
    affinity: {}
    autoscaling:
      enabled: false
    containerSecurityContext: {}
    dashboardProviders: {}
    dashboards: {}
    dashboardsConfigMaps: {}
    datasources: {}
    defaultDashboardsEnabled: true
    defaultDashboardsTimezone: utc
    deleteDatasources: []
    deploymentStrategy:
      type: RollingUpdate
    downloadDashboards:
      env: {}
      envFromSecret: ""
      resources: {}
    downloadDashboardsImage:
      pullPolicy: IfNotPresent
      repository: curlimages/curl
      sha: ""
      tag: 7.73.0
    enableKubeBackwardCompatibility: false
    enableServiceLinks: true
    enabled: true
    env: {}
    envFromConfigMaps: []
    envFromSecret: ""
    envFromSecrets: []
    envRenderSecret: {}
    envValueFrom: {}
    extraConfigmapMounts: []
    extraContainerVolumes: []
    extraContainers: ""
    extraEmptyDirMounts: []
    extraExposePorts: []
    extraInitContainers: []
    extraLabels: {}
    extraObjects: []
    extraSecretMounts: []
    extraVolumeMounts: []
    forceDeployDashboards: false
    forceDeployDatasources: false
    global:
      imagePullSecrets: []
      rbac:
        create: true
        createAggregateClusterRoles: false
        pspAnnotations: {}
        pspEnabled: false
    grafana.ini:
      analytics:
        check_for_updates: true
      grafana_net:
        url: https://grafana.net
      log:
        mode: console
      paths:
        data: /var/lib/grafana/
        logs: /var/log/grafana
        plugins: /var/lib/grafana/plugins
        provisioning: /etc/grafana/provisioning
    headlessService: false
    hostAliases: []
    image:
      pullPolicy: IfNotPresent
      repository: grafana/grafana
      sha: ""
      tag: 8.4.5
    imageRenderer:
      enabled: false
      env:
        HTTP_HOST: 0.0.0.0
      grafanaProtocol: http
      grafanaSubPath: ""
      hostAliases: []
      image:
        pullPolicy: Always
        repository: grafana/grafana-image-renderer
        sha: ""
        tag: latest
      networkPolicy:
        limitEgress: false
        limitIngress: true
      podPortName: http
      priorityClassName: ""
      replicas: 1
      resources: {}
      revisionHistoryLimit: 10
      securityContext: {}
      service:
        enabled: true
        port: 8081
        portName: http
        targetPort: 8081
      serviceAccountName: ""
    ingress:
      annotations: {}
      enabled: false
      extraPaths: []
      hosts: []
      labels: {}
      path: /
      pathType: Prefix
      tls: []
    initChownData:
      enabled: true
      image:
        pullPolicy: IfNotPresent
        repository: busybox
        sha: ""
        tag: 1.31.1
      resources: {}
    ldap:
      config: ""
      enabled: false
      existingSecret: ""
    livenessProbe:
      failureThreshold: 10
      httpGet:
        path: /api/health
        port: 3000
      initialDelaySeconds: 60
      timeoutSeconds: 30
    namespaceOverride: ""
    networkPolicy:
      allowExternal: true
      enabled: false
      explicitNamespacesSelector: {}
    nodeSelector: {}
    notifiers: {}
    persistence:
      accessModes:
      - ReadWriteOnce
      enabled: false
      finalizers:
      - kubernetes.io/pvc-protection
      inMemory:
        enabled: false
      size: 10Gi
      type: pvc
    plugins: []
    podDisruptionBudget: {}
    podPortName: grafana
    rbac:
      create: true
      extraClusterRoleRules: []
      extraRoleRules: []
      namespaced: false
      pspEnabled: false
      pspUseAppArmor: true
    readinessProbe:
      httpGet:
        path: /api/health
        port: 3000
    replicas: 1
    resources: {}
    revisionHistoryLimit: 10
    securityContext:
      fsGroup: 472
      runAsGroup: 472
      runAsUser: 472
    service:
      annotations: {}
      enabled: true
      labels: {}
      port: 80
      portName: http-web
      targetPort: 3000
      type: ClusterIP
    serviceAccount:
      autoMount: true
      create: true
    serviceMonitor:
      enabled: true
      interval: ""
      labels: {}
      path: /metrics
      relabelings: []
      scheme: http
      scrapeTimeout: 30s
      tlsConfig: {}
    sidecar:
      dashboards:
        SCProvider: true
        annotations: {}
        defaultFolderName: null
        enabled: true
        extraMounts: []
        folder: /tmp/dashboards
        folderAnnotation: null
        label: grafana_dashboard
        labelValue: "1"
        multicluster:
          etcd:
            enabled: false
          global:
            enabled: false
        provider:
          allowUiUpdates: false
          disableDelete: false
          folder: ""
          foldersFromFilesStructure: false
          name: sidecarProvider
          orgid: 1
          type: file
        resource: both
        script: null
        searchNamespace: null
        watchMethod: WATCH
      datasources:
        annotations: {}
        createPrometheusReplicasDatasources: false
        defaultDatasourceEnabled: true
        enabled: true
        initDatasources: false
        label: grafana_datasource
        labelValue: "1"
        reloadURL: http://localhost:3000/api/admin/provisioning/datasources/reload
        resource: both
        searchNamespace: null
        skipReload: false
        uid: prometheus
        watchMethod: WATCH
      enableUniqueFilenames: false
      image:
        repository: quay.io/kiwigrid/k8s-sidecar
        sha: ""
        tag: 1.15.6
      imagePullPolicy: IfNotPresent
      notifiers:
        enabled: false
        label: grafana_notifier
        resource: both
      plugins:
        enabled: false
        initPlugins: false
        label: grafana_plugin
        reloadURL: http://localhost:3000/api/admin/provisioning/plugins/reload
        resource: both
        skipReload: false
        watchMethod: WATCH
      resources: {}
      securityContext: {}
    smtp:
      existingSecret: ""
      passwordKey: password
      userKey: user
    testFramework:
      enabled: true
      image: bats/bats
      imagePullPolicy: IfNotPresent
      securityContext: {}
      tag: v1.4.1
    tolerations: []
  kube-state-metrics:
    affinity: {}
    autosharding:
      enabled: false
    collectors:
    - certificatesigningrequests
    - configmaps
    - cronjobs
    - daemonsets
    - deployments
    - endpoints
    - horizontalpodautoscalers
    - ingresses
    - jobs
    - limitranges
    - mutatingwebhookconfigurations
    - namespaces
    - networkpolicies
    - nodes
    - persistentvolumeclaims
    - persistentvolumes
    - poddisruptionbudgets
    - pods
    - replicasets
    - replicationcontrollers
    - resourcequotas
    - secrets
    - services
    - statefulsets
    - storageclasses
    - validatingwebhookconfigurations
    - volumeattachments
    containerSecurityContext: {}
    customLabels: {}
    extraArgs: []
    global:
      imagePullSecrets: []
      rbac:
        create: true
        createAggregateClusterRoles: false
        pspAnnotations: {}
        pspEnabled: false
    hostNetwork: false
    image:
      pullPolicy: IfNotPresent
      repository: k8s.gcr.io/kube-state-metrics/kube-state-metrics
      tag: v2.4.1
    imagePullSecrets: []
    kubeTargetVersionOverride: ""
    kubeconfig:
      enabled: false
    metricAllowlist: []
    metricAnnotationsAllowList: []
    metricDenylist: []
    metricLabelsAllowlist: []
    namespaceOverride: ""
    namespaces: ""
    namespacesDenylist: ""
    nodeSelector: {}
    podAnnotations: {}
    podDisruptionBudget: {}
    podSecurityPolicy:
      additionalVolumes: []
      annotations: {}
      enabled: false
    prometheus:
      monitor:
        additionalLabels: {}
        enabled: true
        honorLabels: true
        interval: ""
        jobLabel: ""
        metricRelabelings: []
        namespace: ""
        proxyUrl: ""
        relabelings: []
        scrapeTimeout: ""
        selectorOverride: {}
    prometheusScrape: true
    rbac:
      create: true
      useClusterRole: true
    releaseLabel: true
    replicas: 1
    resources: {}
    securityContext:
      enabled: true
      fsGroup: 65534
      runAsGroup: 65534
      runAsUser: 65534
    selfMonitor:
      enabled: false
    service:
      annotations: {}
      clusterIP: ""
      loadBalancerIP: ""
      nodePort: 0
      port: 8080
      type: ClusterIP
    serviceAccount:
      annotations: {}
      create: true
      imagePullSecrets: []
    tolerations: []
  kubeApiServer:
    enabled: true
    serviceMonitor:
      interval: ""
      jobLabel: component
      metricRelabelings: []
      proxyUrl: ""
      relabelings: []
      selector:
        matchLabels:
          component: apiserver
          provider: kubernetes
    tlsConfig:
      insecureSkipVerify: false
      serverName: kubernetes
  kubeControllerManager:
    enabled: true
    endpoints: []
    service:
      enabled: true
    serviceMonitor:
      enabled: true
      interval: ""
      metricRelabelings: []
      proxyUrl: ""
      relabelings: []
  kubeDns:
    enabled: false
    service:
      dnsmasq:
        port: 10054
        targetPort: 10054
      skydns:
        port: 10055
        targetPort: 10055
    serviceMonitor:
      dnsmasqMetricRelabelings: []
      dnsmasqRelabelings: []
      interval: ""
      metricRelabelings: []
      proxyUrl: ""
      relabelings: []
  kubeEtcd:
    enabled: true
    endpoints: []
    service:
      enabled: true
      port: 2379
      targetPort: 2379
    serviceMonitor:
      caFile: ""
      certFile: ""
      enabled: true
      insecureSkipVerify: false
      interval: ""
      keyFile: ""
      metricRelabelings: []
      proxyUrl: ""
      relabelings: []
      scheme: http
      serverName: ""
  kubeProxy:
    enabled: true
    endpoints: []
    service:
      enabled: true
      port: 10249
      targetPort: 10249
    serviceMonitor:
      enabled: true
      https: false
      interval: ""
      metricRelabelings: []
      proxyUrl: ""
      relabelings: []
  kubeScheduler:
    enabled: true
    endpoints: []
    service:
      enabled: true
    serviceMonitor:
      enabled: true
      interval: ""
      metricRelabelings: []
      proxyUrl: ""
      relabelings: []
  kubeStateMetrics:
    enabled: true
  kubeTargetVersionOverride: ""
  kubeVersionOverride: ""
  kubelet:
    enabled: true
    namespace: kube-system
    serviceMonitor:
      cAdvisor: true
      cAdvisorMetricRelabelings: []
      cAdvisorRelabelings:
      - sourceLabels:
        - __metrics_path__
        targetLabel: metrics_path
      https: true
      interval: ""
      metricRelabelings: []
      probes: true
      probesMetricRelabelings: []
      probesRelabelings:
      - sourceLabels:
        - __metrics_path__
        targetLabel: metrics_path
      proxyUrl: ""
      relabelings:
      - sourceLabels:
        - __metrics_path__
        targetLabel: metrics_path
      resource: false
      resourcePath: /metrics/resource/v1alpha1
      resourceRelabelings:
      - sourceLabels:
        - __metrics_path__
        targetLabel: metrics_path
  nameOverride: ""
  namespaceOverride: ""
  nodeExporter:
    enabled: true
  prometheus:
    additionalPodMonitors: []
    additionalRulesForClusterRole: []
    additionalServiceMonitors: []
    annotations: {}
    enabled: true
    extraSecret:
      annotations: {}
      data: {}
    ingress:
      annotations: {}
      enabled: false
      hosts: []
      labels: {}
      paths: []
      tls: []
    ingressPerReplica:
      annotations: {}
      enabled: false
      hostDomain: ""
      hostPrefix: ""
      labels: {}
      paths: []
      tlsSecretName: ""
      tlsSecretPerReplica:
        enabled: false
        prefix: prometheus
    podDisruptionBudget:
      enabled: false
      maxUnavailable: ""
      minAvailable: 1
    podSecurityPolicy:
      allowedCapabilities: []
      allowedHostPaths: []
      volumes: []
    prometheusSpec:
      additionalAlertManagerConfigs: []
      additionalAlertManagerConfigsSecret: {}
      additionalAlertRelabelConfigs: []
      additionalAlertRelabelConfigsSecret: {}
      additionalPrometheusSecretsAnnotations: {}
      additionalRemoteRead: []
      additionalRemoteWrite: []
      additionalScrapeConfigs: []
      additionalScrapeConfigsSecret: {}
      affinity: {}
      alertingEndpoints: []
      allowOverlappingBlocks: false
      apiserverConfig: {}
      arbitraryFSAccessThroughSMs: false
      configMaps: []
      containers: []
      disableCompaction: false
      enableAdminAPI: false
      enableFeatures: []
      enforcedLabelLimit: false
      enforcedLabelNameLengthLimit: false
      enforcedLabelValueLengthLimit: false
      enforcedNamespaceLabel: ""
      enforcedSampleLimit: false
      enforcedTargetLimit: false
      evaluationInterval: ""
      externalLabels: {}
      externalUrl: ""
      ignoreNamespaceSelectors: false
      image:
        repository: quay.io/prometheus/prometheus
        sha: ""
        tag: v2.34.0
      initContainers: []
      listenLocal: false
      logFormat: logfmt
      logLevel: info
      nodeSelector: {}
      overrideHonorLabels: false
      overrideHonorTimestamps: false
      paused: false
      podAntiAffinity: ""
      podAntiAffinityTopologyKey: kubernetes.io/hostname
      podMetadata: {}
      podMonitorNamespaceSelector: {}
      podMonitorSelector: {}
      podMonitorSelectorNilUsesHelmValues: true
      portName: http-web
      priorityClassName: ""
      probeNamespaceSelector: {}
      probeSelector: {}
      probeSelectorNilUsesHelmValues: true
      prometheusExternalLabelName: ""
      prometheusExternalLabelNameClear: false
      prometheusRulesExcludedFromEnforce: []
      query: {}
      queryLogFile: false
      remoteRead: []
      remoteWrite: []
      remoteWriteDashboards: false
      replicaExternalLabelName: ""
      replicaExternalLabelNameClear: false
      replicas: 1
      resources: {}
      retention: 10d
      retentionSize: ""
      routePrefix: /
      ruleNamespaceSelector: {}
      ruleSelector: {}
      ruleSelectorNilUsesHelmValues: true
      scrapeInterval: ""
      scrapeTimeout: ""
      secrets: []
      securityContext:
        fsGroup: 2000
        runAsGroup: 2000
        runAsNonRoot: true
        runAsUser: 1000
      serviceMonitorNamespaceSelector: {}
      serviceMonitorSelector: {}
      serviceMonitorSelectorNilUsesHelmValues: true
      shards: 1
      storageSpec: {}
      thanos: {}
      tolerations: []
      topologySpreadConstraints: []
      volumeMounts: []
      volumes: []
      walCompression: false
      web: {}
    service:
      additionalPorts: []
      annotations: {}
      clusterIP: ""
      externalIPs: []
      externalTrafficPolicy: Cluster
      labels: {}
      loadBalancerIP: ""
      loadBalancerSourceRanges: []
      nodePort: 30090
      port: 9090
      publishNotReadyAddresses: false
      sessionAffinity: ""
      targetPort: 9090
      type: ClusterIP
    serviceAccount:
      annotations: {}
      create: true
      name: ""
    serviceMonitor:
      interval: ""
      metricRelabelings: []
      relabelings: []
      scheme: ""
      selfMonitor: true
      tlsConfig: {}
    servicePerReplica:
      annotations: {}
      enabled: false
      externalTrafficPolicy: Cluster
      loadBalancerSourceRanges: []
      nodePort: 30091
      port: 9090
      targetPort: 9090
      type: ClusterIP
    thanosIngress:
      annotations: {}
      enabled: false
      hosts: []
      labels: {}
      nodePort: 30901
      paths: []
      servicePort: 10901
      tls: []
    thanosService:
      annotations: {}
      clusterIP: None
      enabled: false
      externalTrafficPolicy: Cluster
      httpNodePort: 30902
      httpPort: 10902
      httpPortName: http
      labels: {}
      nodePort: 30901
      port: 10901
      portName: grpc
      targetHttpPort: http
      targetPort: grpc
      type: ClusterIP
    thanosServiceExternal:
      annotations: {}
      enabled: false
      externalTrafficPolicy: Cluster
      httpNodePort: 30902
      httpPort: 10902
      httpPortName: http
      labels: {}
      loadBalancerIP: ""
      loadBalancerSourceRanges: []
      nodePort: 30901
      port: 10901
      portName: grpc
      targetHttpPort: http
      targetPort: grpc
      type: LoadBalancer
    thanosServiceMonitor:
      enabled: false
      interval: ""
      metricRelabelings: []
      relabelings: []
      scheme: ""
      tlsConfig: {}
  prometheus-node-exporter:
    affinity: {}
    configmaps: []
    containerSecurityContext: {}
    dnsConfig: {}
    endpoints: []
    env: {}
    extraArgs:
    - --collector.filesystem.mount-points-exclude=^/(dev|proc|sys|var/lib/docker/.+|var/lib/kubelet/.+)($|/)
    - --collector.filesystem.fs-types-exclude=^(autofs|binfmt_misc|bpf|cgroup2?|configfs|debugfs|devpts|devtmpfs|fusectl|hugetlbfs|iso9660|mqueue|nsfs|overlay|proc|procfs|pstore|rpc_pipefs|securityfs|selinuxfs|squashfs|sysfs|tracefs)$
    extraHostVolumeMounts: []
    extraInitContainers: []
    global:
      imagePullSecrets: []
      rbac:
        create: true
        createAggregateClusterRoles: false
        pspAnnotations: {}
        pspEnabled: false
    hostNetwork: true
    hostPID: true
    hostRootFsMount:
      enabled: true
      mountPropagation: HostToContainer
    image:
      pullPolicy: IfNotPresent
      repository: quay.io/prometheus/node-exporter
      tag: ""
    namespaceOverride: ""
    nodeSelector: {}
    podAnnotations:
      cluster-autoscaler.kubernetes.io/safe-to-evict: "true"
    podLabels:
      jobLabel: node-exporter
    prometheus:
      monitor:
        additionalLabels: {}
        bearerTokenFile: null
        enabled: true
        interval: ""
        jobLabel: jobLabel
        metricRelabelings: []
        namespace: ""
        proxyUrl: ""
        relabelings: []
        scheme: http
        scrapeTimeout: ""
        selectorOverride: {}
        tlsConfig: {}
    rbac:
      create: true
      pspAnnotations: {}
      pspEnabled: false
    resources: {}
    secrets: []
    securityContext:
      fsGroup: 65534
      runAsGroup: 65534
      runAsNonRoot: true
      runAsUser: 65534
    service:
      annotations:
        prometheus.io/scrape: "true"
      listenOnAllInterfaces: true
      nodePort: null
      port: 9100
      portName: http-metrics
      targetPort: 9100
      type: ClusterIP
    serviceAccount:
      annotations: {}
      automountServiceAccountToken: false
      create: true
      imagePullSecrets: []
    sidecarVolumeMount: []
    sidecars: []
    tolerations:
    - effect: NoSchedule
      operator: Exists
    updateStrategy:
      rollingUpdate:
        maxUnavailable: 1
      type: RollingUpdate
  prometheusOperator:
    admissionWebhooks:
      caBundle: ""
      certManager:
        admissionCert:
          duration: ""
        enabled: false
        rootCert:
          duration: ""
      enabled: true
      failurePolicy: Fail
      patch:
        affinity: {}
        enabled: true
        image:
          pullPolicy: IfNotPresent
          repository: k8s.gcr.io/ingress-nginx/kube-webhook-certgen
          sha: ""
          tag: v1.1.1
        nodeSelector: {}
        podAnnotations: {}
        priorityClassName: ""
        resources: {}
        securityContext:
          runAsGroup: 2000
          runAsNonRoot: true
          runAsUser: 2000
        tolerations: []
    affinity: {}
    alertmanagerInstanceNamespaces: []
    containerSecurityContext:
      allowPrivilegeEscalation: false
      readOnlyRootFilesystem: true
    denyNamespaces: []
    dnsConfig: {}
    enabled: true
    hostNetwork: false
    image:
      pullPolicy: IfNotPresent
      repository: quay.io/prometheus-operator/prometheus-operator
      sha: ""
      tag: v0.55.0
    kubeletService:
      enabled: true
      name: ""
      namespace: kube-system
    namespaces: {}
    nodeSelector: {}
    podAnnotations: {}
    podLabels: {}
    prometheusConfigReloader:
      image:
        repository: quay.io/prometheus-operator/prometheus-config-reloader
        sha: ""
        tag: v0.55.0
      resources:
        limits:
          cpu: 200m
          memory: 50Mi
        requests:
          cpu: 200m
          memory: 50Mi
    prometheusInstanceNamespaces: []
    resources: {}
    secretFieldSelector: ""
    securityContext:
      fsGroup: 65534
      runAsGroup: 65534
      runAsNonRoot: true
      runAsUser: 65534
    service:
      additionalPorts: []
      annotations: {}
      clusterIP: ""
      externalIPs: []
      externalTrafficPolicy: Cluster
      labels: {}
      loadBalancerIP: ""
      loadBalancerSourceRanges: []
      nodePort: 30080
      nodePortTls: 30443
      type: ClusterIP
    serviceAccount:
      create: true
      name: ""
    serviceMonitor:
      interval: ""
      metricRelabelings: []
      relabelings: []
      scrapeTimeout: ""
      selfMonitor: true
    thanosImage:
      repository: quay.io/thanos/thanos
      sha: ""
      tag: v0.25.2
    thanosRulerInstanceNamespaces: []
    tls:
      enabled: true
      internalPort: 10250
      tlsMinVersion: VersionTLS13
    tolerations: []
